# Hide the nginx version
server_tokens off;

ssl_certificate /home/fullchain.pem;
ssl_certificate_key /home/privkey.pem;

# This is useful when using a reverse proxy like Cloudflare
<ALLOWED_PROXY_SUBNETS>

# Only redirect for Gazelle. No need to redirect for Ocelot since
# users don't manually interact with that domain.
server {
    listen 80;
    server_name <GAZELLE_SITE_HOST>;
    return 301 https://<GAZELLE_SITE_HOST>$request_uri;
}

server {
    listen 80 default_server;
    return 404;
}

server {
    listen 443 ssl default_server;
    return 404;
}

# The main Gazelle + Ocelot server
server {
    listen 443 ssl;
    root /var/www/html;
    index index.php;

    server_name <GAZELLE_SITE_HOST>;

    location / {
        try_files $uri $uri/ =404;
        add_header X-Powered-By Octavius;
    }

    location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass php_fpm:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

        # Reduce attack surface by hiding the server versions
        fastcgi_hide_header X-Powered-By;
        add_header X-Powered-By Octavius;
    }

    # Ocelot reverse proxy
    location ~ /\w+/(announce|scrape|update|report)$ {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_pass http://ocelot:2710;
        proxy_read_timeout 60s;

        proxy_redirect http://ocelot:2710 https://<GAZELLE_SITE_HOST>;
    }
}
